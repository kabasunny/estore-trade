@startuml
top to bottom direction

skinparam packageTitleFontColor #ffffff
skinparam packageTitleBackgroundColor #2E4372
skinparam packageBorderColor #2E4372
skinparam packageBorderThickness 1
skinparam packageTitleFontSize 14
skinparam packageFontSize 13
skinparam defaultFontName "Meiryo"
skinparam classFontSize 12
skinparam classAttributeIconSize 0
skinparam legendFontSize 12

skinparam interface {
  BackgroundColor #CCFFFF
  FontStyle Bold
  BorderColor #3399ff
}

' struct のスタイル (Go では class ではなく struct を使うため)
skinparam struct {
  BackgroundColor #FFFFFF
  BorderColor #000080
}

' main.go は関数と依存関係のみで構成されるため、特に図示しない
' main関数は各コンポーネントの初期化と依存性の注入を担当（コメントで表現）

package "internal/config" {
  struct "config.go" as config {
    +LoadConfig() *Config
  }
  struct Config {
    +TachibanaAPIKey    : string
    +TachibanaAPISecret : string
    +TachibanaBaseURL   : string
    +DBHost             : string
    +DBPort             : int
    +DBUser             : string
    +DBPassword         : string
    +DBName             : string
    +LogLevel           : string
    +EventRid     : string
    +EventBoardNo : string
    +EventEvtCmd  : string
  }
}

package "internal/domain" {
   struct Order
   struct Account
   struct Position
   struct OrderEvent

  interface OrderRepository {
    +CreateOrder(ctx context.Context, order *Order) error
    +GetOrder(ctx context.Context, id string) (*Order, error)
    +UpdateOrder(ctx context.Context, order *Order) error
    +UpdateOrderStatus(ctx context.Context, orderID string, status string) error
  }
  interface AccountRepository {
   +GetAccount(ctx context.Context, id string) (*Account, error)
   +UpdateAccount(ctx context.Context, account *Account) error
  }
  ' struct "repository.go" as repository{}  repository.go はインターフェース定義なので不要
}

package "internal/handler" {
  struct "trading.go" as handler {
    +NewTradingHandler() *TradingHandler
    +HandleTrade()
  }
  struct TradingHandler {
    -tradingUsecase : usecase.TradingUsecase
    -logger         : *zap.Logger
  }
}

package "internal/infrastructure/database/postgres" {
  struct "postgres.go" as postgres {
    +NewPostgresDB() *PostgresDB
    +Close() error
    +DB() *sql.DB
  }
  struct PostgresDB {
    -db     : *sql.DB
    -logger : *zap.Logger
  }
}

package "internal/infrastructure/logger/zapLogger" {
  struct "zapLogger.go" as zapLogger {
    +NewZapLogger() *zap.Logger
  }
}

package "internal/infrastructure/persistence" {
  struct "order_repository.go" as orderRepoImpl {
    +NewOrderRepository() domain.OrderRepository
    +CreateOrder() error
    +GetOrder() (*Order, error)
    +UpdateOrder() error
    +UpdateOrderStatus() error
  }

  struct "account_repository.go" as accountRepoImpl {
    +NewAccountRepository() domain.AccountRepository
    +GetAccount() (*Account, error)
    +UpdateAccount() error
  }

  package "tachibana" {
    interface TachibanaClient {
        +Login(ctx context.Context, userID, password string) (string, error)
        +PlaceOrder(ctx context.Context, requestURL string, order *domain.Order) (*domain.Order, error)
        +GetOrderStatus(ctx context.Context, requestURL string, orderID string) (*domain.Order, error)
        +CancelOrder(ctx context.Context, requestURL string, orderID string) error
        +ConnectEventStream(ctx context.Context) (<-chan domain.OrderEvent, error)
        +DownloadMasterData(ctx context.Context, requestURL string) error
        +GetSystemStatus() SystemStatus
        +GetDateInfo() DateInfo
        +GetCallPrice(unitNumber string) (CallPrice, bool)
        +GetIssueMaster(issueCode string) (IssueMaster, bool)
    }

    ' struct "tachibana_client.go" as tachibanaClient  インターフェース定義なので不要

    struct "client_core.go" as clientCore {
      +NewTachibanaClient() TachibanaClient
      +Login() (string, error)
      +getPNo() string
      +sendRequest() (map[string]interface{}, error)
      +ConnectEventStream() (<-chan domain.OrderEvent, error)
    }
     struct "client_login.go" as clientLogin {
        +login() (string, error)
     }
     struct "client_order.go" as clientOrder {
        +PlaceOrder() (*domain.Order, error)
        +GetOrderStatus() (*domain.Order, error)
        +CancelOrder() error
     }

     struct "client_master_data.go" as clientMasterData{
        +DownloadMasterData() error
        +GetSystemStatus() SystemStatus
        +GetDateInfo() DateInfo
        +GetCallPrice(unitNumber string) (CallPrice, bool)
        +GetIssueMaster(issueCode string) (IssueMaster, bool)
        +mapToStruct() error
     }

    struct TachibanaClientImple {
      -baseURL : *url.URL
      -apiKey : string
      -secret : string
      -logger : *zap.Logger
      -requestURL : string
      -expiry : time.Time
      -mu : sync.RWMutex
      -pNo        : int64
      -pNoMu      : sync.Mutex
      -systemStatus SystemStatus
      -dateInfo     DateInfo
      -callPriceMap map[string]CallPrice
      -issueMap     map[string]IssueMaster
    }

    struct "event_stream.go" as eventStream {
      +NewEventStream() *EventStream
      +Start() error
      +Stop() error
      +parseEvent() (*domain.OrderEvent, error)
      +sendEvent()
    }
    struct EventStream {
      -tachibanaClient : TachibanaClient
      -config : *config.Config
      -logger : *zap.Logger
      -eventCh : chan<- domain.OrderEvent
      -stopCh : chan struct{}
      -conn : *http.Client
      -req : *http.Request
    }
    struct "constants.go" as constants
    struct "master.go" as master
    struct "utils.go" as utils
  }
}

package "internal/usecase" {
  interface TradingUsecase {
    +PlaceOrder(ctx context.Context, userID, password string, order *domain.Order) (*domain.Order, error)
    +GetOrderStatus(ctx context.Context, userID, password string, orderID string) (*domain.Order, error)
    +CancelOrder(ctx context.Context, userID, password string, orderID string) error
    +GetEventChannelReader() <-chan domain.OrderEvent
    +GetEventChannelWriter() chan<- domain.OrderEvent
    +HandleOrderEvent(ctx context.Context, event *domain.OrderEvent) error
  }

  struct "trading_impl.go" as tradingImpl {
    +NewTradingUsecase() TradingUsecase
    +PlaceOrder() (*domain.Order, error)
    +GetOrderStatus() (*domain.Order, error)
    +CancelOrder() error
    +GetEventChannelReader() <-chan domain.OrderEvent
    +GetEventChannelWriter() chan<- domain.OrderEvent
    +HandleOrderEvent() error
  }
  struct tradingUsecase {
    -tachibanaClient : tachibana.TachibanaClient
    -logger : *zap.Logger
    -orderRepo : domain.OrderRepository
    -accountRepo : domain.AccountRepository
    -eventCh : chan domain.OrderEvent
  }
}

package "internal/autotrading" {
    interface AutoTradingUsecase {
      +Start() error
      +Stop() error
      +HandleEvent(event domain.OrderEvent)
    }

    struct "autotrading_impl.go" as autotradingImpl {
        +NewAutoTradingUsecase() AutoTradingUsecase
        +Start() error
        +Stop() error
        +HandleEvent(event domain.OrderEvent)
    }
    struct autoTradingUsecase{
      -tradingUsecase       : usecase.TradingUsecase
      -autoTradingAlgorithm : *AutoTradingAlgorithm
      -logger               : *zap.Logger
      -config               : *config.Config
      -eventCh              : <-chan domain.OrderEvent
    }
    struct AutoTradingAlgorithm{
        +GenerateSignal(event *domain.OrderEvent) (*Signal, error)
        +CalculatePosition(signal *Signal) (*Position, error)
    }
    struct Signal{
        Symbol string
        Side   string
    }
    struct Position{
        Symbol   string
        Quantity int
        Side     string
    }
}

' 依存関係の記述。mainからの依存関係はコメントで補足
' main -[#blue,dashed]-> config : uses
' main -[#blue,dashed]-> zapLogger : uses
' main -[#blue,dashed]-> postgres : uses
' main -[#blue,dashed]-> clientCore : uses
' main -[#blue,dashed]-> orderRepoImpl : uses
' main -[#blue,dashed]-> accountRepoImpl : uses
' main -[#blue,dashed]-> tradingImpl : uses
' main -[#blue,dashed]-> eventStream : uses
' main -[#blue,dashed]-> handler : uses
' main -[#blue,dashed]-> autotradingImpl : uses

' note left of main
'   main関数は、
'   各コンポーネントを
'   初期化し、
'   依存関係を注入する
' end note


handler -[#blue,dashed]-> tradingImpl : uses

tradingImpl .[#green,dotted]|> TradingUsecase

tradingImpl -[#blue,dashed]-> clientCore : uses
tradingImpl -[#blue,dashed]-> orderRepoImpl : uses
tradingImpl -[#blue,dashed]-> accountRepoImpl : uses

autotradingImpl ..|> AutoTradingUsecase
autotradingImpl -[#blue,dashed]-> tradingImpl: uses

clientCore .[#green,dotted]|> TachibanaClient
clientCore -[#blue,dashed]-> config : uses
clientCore -[#blue,dashed]-> zapLogger : uses
clientLogin -[#blue,dashed]-> clientCore : uses
clientOrder -[#blue,dashed]-> clientCore : uses
clientMasterData -[#blue,dashed]-> clientCore : uses

eventStream -[#blue,dashed]-> config : uses
eventStream -[#blue,dashed]-> zapLogger : uses
eventStream -[#blue,dashed]-> clientCore : uses
eventStream -[#blue,dashed]-> tradingImpl : "sends events"

orderRepoImpl .[#green,dotted]|> OrderRepository
accountRepoImpl .[#green,dotted]|> AccountRepository

postgres -[#blue,dashed]-> config : uses
postgres -[#blue,dashed]-> zapLogger : uses

zapLogger -[#blue,dashed]-> config : uses

config -- Config  : composition
'model -- Order
'model -- Account
'model -- Position
'model -- OrderEvent
'↑ドメインモデルは多数あるので省略

tachibanaClient .[#green,dotted]|> TachibanaClient

usecase.TradingUsecase -[#red,plain]-> OrderRepository : uses
usecase.TradingUsecase -[#red,plain]-> AccountRepository: uses

legend
  |= Symbol |= Type |= Description |
  '|<#lightblue>| Main | main.goの依存関係|  main.go はシンプルな依存性注入の表現にとどめる
  |<#lightgreen>| Implementation | インターフェースの実装 |
  |<#red>       | Interface Usage| インターフェースの利用 |
  |<#blue,dashed>| Uses | 依存関係 (点線) |
end legend
@enduml