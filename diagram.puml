@startuml
top to bottom direction

skinparam packageTitleFontColor #ffffff
skinparam packageTitleBackgroundColor #2E4372
skinparam packageBorderColor #2E4372
skinparam packageBorderThickness 1
skinparam packageTitleFontSize 14
skinparam packageFontSize 13
skinparam defaultFontName "Meiryo"
skinparam classFontSize 12
skinparam classAttributeIconSize 0
skinparam legendFontSize 12

skinparam interface {
  BackgroundColor #CCFFFF
  FontStyle Bold
  BorderColor #3399ff
}
skinparam class {
  BackgroundColor #FFFFFF
}

class "main.go" as main {
}

package "internal/config" {
  class "config.go" as config {
    +LoadConfig() *Config
  }
  class Config {
    +TachibanaAPIKey : string
    +TachibanaAPISecret : string
    +TachibanaBaseURL : string
    +DBHost : string
    +DBPort : int
    +DBUser : string
    +DBPassword : string
    +DBName : string
    +LogLevel : string
    +EventRid : string
    +EventBoardNo : string
    +EventEvtCmd : string
  }
}

package "internal/domain" {
  class "model.go" as model

  class Order
  class Account
  class Position
  class OrderEvent

  interface OrderRepository
  interface AccountRepository
  class "repository.go" as repository
}

package "internal/handler" {
  class "trading.go" as handler {
    +NewTradingHandler() *TradingHandler
    +HandleTrade()
  }
  class TradingHandler {
    -tradingUsecase : usecase.TradingUsecase
    -logger : *zap.Logger
  }
}

package "internal/infrastructure/database/postgres" {
  class "postgres.go" as postgres {
    +NewPostgresDB() *PostgresDB
    +Close() error
    +DB() *sql.DB
  }
  class PostgresDB {
    -db : *sql.DB
    -logger : *zap.Logger
  }
}

package "internal/infrastructure/logger/zapLogger" {
  class "zapLogger.go" as zapLogger {
    +NewZapLogger() *zap.Logger
  }
}

package "internal/infrastructure/persistence" {
  class "order_repository.go" as orderRepoImpl {
    +NewOrderRepository() domain.OrderRepository
    +CreateOrder() error
    +GetOrder() (*Order, error)
    +UpdateOrder() error
    +UpdateOrderStatus() error
  }

  class "account_repository.go" as accountRepoImpl {
    +NewAccountRepository() domain.AccountRepository
    +GetAccount() (*Account, error)
    +UpdateAccount() error
  }

  package "tachibana" {
    interface TachibanaClient

    class "tachibana_client.go" as tachibanaClient
      
    class "client_core.go" as clientCore {
      +NewTachibanaClient() TachibanaClient
      +Login() (string, error)
      +getPNo() string
      +sendRequest() (map[string]interface{}, error)
      +ConnectEventStream() (<-chan *domain.OrderEvent, error)
    }

     class "client_login.go" as clientLogin {
        +login() (string, error)
     }
     class "client_order.go" as clientOrder {
        +PlaceOrder() (*domain.Order, error)
        +GetOrderStatus() (*domain.Order, error)
        +CancelOrder() error
     }

     class "client_master_data.go" as clientMasterData{
        +DownloadMasterData() error
        +GetSystemStatus() SystemStatus
        +GetDateInfo() DateInfo
        +GetCallPrice(unitNumber string) (CallPrice, bool)
        +GetIssueMaster(issueCode string) (IssueMaster, bool)
        +mapToStruct() error
     }

    class TachibanaClientIntImple {
      -baseURL : *url.URL
      -apiKey : string
      -secret : string
      -logger : *zap.Logger
      -requestURL : string
      -expiry : time.Time
      -mu : sync.RWMutex
      -pNo        : int64       
      -pNoMu      : sync.Mutex  
      -systemStatus SystemStatus
      -dateInfo     DateInfo
      -callPriceMap map[string]CallPrice
      -issueMap     map[string]IssueMaster
    }

    class "event_stream.go" as eventStream {
      +NewEventStream() *EventStream
      +Start() error
      +Stop() error
      +parseEvent() (*domain.OrderEvent, error)
      +sendEvent()
    }
    class EventStream {
      -tachibanaClient : TachibanaClient
      -config : *config.Config
      -logger : *zap.Logger
      -eventCh : chan<- *domain.OrderEvent
      -stopCh : chan struct{}
      -conn : *http.Client
      -req : *http.Request
    }
    class "constants.go" as constants
    class "master.go" as master
    class "utils.go" as utils
  }
}

package "internal/usecase" {
  interface TradingUsecase

  class "trading.go" as usecase {
    +GetEventChannelReader() <-chan *domain.OrderEvent
    +GetEventChannelWriter() chan<- *domain.OrderEvent
    +HandleOrderEvent() error
  }

  class "trading_impl.go" as tradingImpl {
    +NewTradingUsecase() TradingUsecase
    +PlaceOrder() (*domain.Order, error)
    +GetOrderStatus() (*domain.Order, error)
    +CancelOrder() error
    +GetEventChannelReader() <-chan *domain.OrderEvent
    +GetEventChannelWriter() chan<- *domain.OrderEvent
    +HandleOrderEvent() error
  }
  class tradingUsecase {
    -tachibanaClient : tachibana.TachibanaClient
    -logger : *zap.Logger
    -orderRepo : domain.OrderRepository
    -accountRepo : domain.AccountRepository
    -eventCh : chan *domain.OrderEvent
  }
}

main -[#blue,dashed]-> config : uses
main -[#blue,dashed]-> zapLogger : uses
main -[#blue,dashed]-> postgres : uses
main -[#blue,dashed]-> clientCore : uses
main -[#blue,dashed]-> orderRepoImpl : uses
main -[#blue,dashed]-> accountRepoImpl : uses
main -[#blue,dashed]-> tradingImpl : uses
main -[#blue,dashed]-> eventStream : uses
main -[#blue,dashed]-> handler : uses

handler -[#blue,dashed]-> tradingImpl : uses

tradingImpl .[#green,dotted]|> TradingUsecase

tradingImpl -[#blue,dashed]-> clientCore : uses
tradingImpl -[#blue,dashed]-> orderRepoImpl : uses
tradingImpl -[#blue,dashed]-> accountRepoImpl : uses

clientCore .[#green,dotted]|> TachibanaClient
clientCore -[#blue,dashed]-> config : uses
clientCore -[#blue,dashed]-> zapLogger : uses
clientLogin -[#blue,dashed]-> clientCore : uses
clientOrder -[#blue,dashed]-> clientCore : uses
clientMasterData -[#blue,dashed]-> clientCore : uses

eventStream -[#blue,dashed]-> config : uses
eventStream -[#blue,dashed]-> zapLogger : uses
eventStream -[#blue,dashed]-> clientCore : uses
eventStream -[#blue,dashed]-> tradingImpl : "sends events"

orderRepoImpl .[#green,dotted]|> OrderRepository
accountRepoImpl .[#green,dotted]|> AccountRepository

postgres -[#blue,dashed]-> config : uses
postgres -[#blue,dashed]-> zapLogger : uses

zapLogger -[#blue,dashed]-> config : uses

config -- Config
model -- Order
model -- Account
model -- Position
model -- OrderEvent
tachibanaClient -[#green,dotted] TachibanaClient

usecase.TradingUsecase -[#red,plain]-> OrderRepository : uses
usecase.TradingUsecase -[#red,plain]-> AccountRepository: uses

legend
  |= Symbol |= Type |= Description |
  |<#lightblue>| Main | main.goの依存関係|
  |<#lightgreen>| Implementation | インターフェースの実装 |
  |<#red>       | Interface Usage| インターフェースの利用 |
  |<#blue,dashed>| Uses | 依存関係 (点線) |
end legend
@enduml