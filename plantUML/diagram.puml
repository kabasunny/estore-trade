@startuml
'top to bottom direction ' 全体を縦方向にする場合はこれを使う（今回はコメントアウト）

skinparam packageTitleFontColor #ffffff
skinparam packageTitleBackgroundColor #2E4372
skinparam packageBorderColor #2E4372
skinparam packageBorderThickness 1
skinparam packageTitleFontSize 14
skinparam packageFontSize 13
skinparam defaultFontName "Meiryo"
skinparam classFontSize 12
skinparam classAttributeIconSize 0
skinparam legendFontSize 12

skinparam interface {
  BackgroundColor #CCFFFF
  FontStyle Bold
  BorderColor #3399ff
}

' struct のスタイル
skinparam struct {
  BackgroundColor #FFFFFF
  BorderColor #000080
}


package "internal" {
    package "config" {
      struct Config {
        +TachibanaAPIKey    : string
        +TachibanaAPISecret : string
        +TachibanaBaseURL   : string
        +DBHost             : string
        +DBPort             : int
        +DBUser             : string
        +DBPassword         : string
        +DBName             : string
        +LogLevel           : string
        +EventRid     : string
        +EventBoardNo : string
        +EventEvtCmd  : string
      }
      struct "config.go" as config {
        +LoadConfig() *Config
      }
    }

    package "domain" {
       struct Order
       struct Account
       struct Position
       struct OrderEvent

      interface OrderRepository {
        +CreateOrder(ctx context.Context, order *Order) error
        +GetOrder(ctx context.Context, id string) (*Order, error)
        +UpdateOrder(ctx context.Context, order *Order) error
        +UpdateOrderStatus(ctx context.Context, orderID string, status string) error
      }
      interface AccountRepository {
       +GetAccount(ctx context.Context, id string) (*Account, error)
       +UpdateAccount(ctx context.Context, account *Account) error
      }
    }

    package "handler" {
      struct TradingHandler {
        -tradingUsecase : usecase.TradingUsecase
        -logger         : *zap.Logger
      }
      struct "trading.go" as handler {
        +NewTradingHandler() *TradingHandler
        +HandleTrade()
      }
    }

  package "infrastructure" {
      package "database" {
        package "postgres" {
          struct PostgresDB {
            -db     : *sql.DB
            -logger : *zap.Logger
          }
          struct "postgres.go" as postgres {
            +NewPostgresDB() *PostgresDB
            +Close() error
            +DB() *sql.DB
          }
        }
    }
    package "logger"{
        package "zapLogger" {
          struct "zapLogger.go" as zapLogger {
            +NewZapLogger() *zap.Logger
          }
        }
      }

    package "persistence" {
        package "account"{
            struct "account_repository.go" as accountRepoImpl {
                +NewAccountRepository() domain.AccountRepository
                +GetAccount() (*Account, error)
                +UpdateAccount() error
            }
        }
        package "order"{
                struct "order_repository.go" as orderRepoImpl {
                +NewOrderRepository() domain.OrderRepository
                +CreateOrder() error
                +GetOrder() (*Order, error)
                +UpdateOrder() error
                +UpdateOrderStatus() error
            }
        }

      package "tachibana" {
        interface TachibanaClient {
            +Login(ctx context.Context, cfg interface{}) error
            +PlaceOrder(ctx context.Context, order *domain.Order) (*domain.Order, error)
            +GetOrderStatus(ctx context.Context, orderID string) (*domain.Order, error)
            +CancelOrder(ctx context.Context, orderID string) error
            +ConnectEventStream(ctx context.Context) (<-chan domain.OrderEvent, error)
            +DownloadMasterData(ctx context.Context) error
            +GetSystemStatus() SystemStatus
            +GetDateInfo() DateInfo
            +GetCallPrice(unitNumber string) (CallPrice, bool)
            +GetIssueMaster(issueCode string) (IssueMaster, bool)
            +GetIssueMarketMaster(issueCode, marketCode string) (IssueMarketMaster, bool)
            +GetIssueMarketRegulation(issueCode, marketCode string) (IssueMarketRegulation, bool)
            +GetOperationStatusKabu(listedMarket string, unit string) (OperationStatusKabu, bool)
            +CheckPriceIsValid(issueCode string, price float64, isNextDay bool) (bool, error)
            +SetTargetIssues(ctx context.Context, issueCodes []string) error
        }


         struct TachibanaClientImple {
            -baseURL : *url.URL
            -apiKey : string
            -secret : string
            -logger : *zap.Logger
            -loggined : bool
            -requestURL : string
            -masterURL  : string
            -priceURL   : string
            -eventURL   : string
            -expiry : time.Time
            -mu : sync.RWMutex
            -pNo        : int64
            -pNoMu      : sync.Mutex
            -systemStatus SystemStatus
            -dateInfo     DateInfo
            -callPriceMap map[string]CallPrice
            -issueMap     map[string]IssueMaster
            -issueMarketMap           map[string]map[string]IssueMarketMaster
            -issueMarketRegulationMap map[string]map[string]IssueMarketRegulation
            -operationStatusKabuMap   map[string]map[string]OperationStatusKabu
            -targetIssueCodes         []string
            -targetIssueCodesMu       sync.RWMutex
          }
          struct "fact_new_tachibana_client.go" as factTachibanaClient {
            +NewTachibanaClient() TachibanaClient
          }

         struct "client_login.go" as clientLogin {
            +login() (bool, error)
         }
         struct "client_order.go" as clientOrder {
            +PlaceOrder() (*domain.Order, error)
            +GetOrderStatus() (*domain.Order, error)
            +CancelOrder() error
         }

         struct "client_master_data.go" as clientMasterData{
            +DownloadMasterData() error
            +GetSystemStatus() SystemStatus
            +GetDateInfo() DateInfo
            +GetCallPrice(unitNumber string) (CallPrice, bool)
            +GetIssueMaster(issueCode string) (IssueMaster, bool)
            +GetIssueMarketMaster(issueCode, marketCode string) (IssueMarketMaster, bool)
            +GetIssueMarketRegulation(issueCode, marketCode string) (IssueMarketRegulation, bool)
            +GetOperationStatusKabu(listedMarket string, unit string) (OperationStatusKabu, bool)
            +CheckPriceIsValid(issueCode string, price float64, isNextDay bool) (bool, error)
         }

        struct "event_stream.go" as eventStream {
          +NewEventStream() *EventStream
          +Start() error
          +Stop() error
          +parseEvent() (*domain.OrderEvent, error)
          +sendEvent()
        }
        struct EventStream {
          -tachibanaClient : TachibanaClient
          -config : *config.Config
          -logger : *zap.Logger
          -eventCh : chan<- domain.OrderEvent
          -stopCh : chan struct{}
          -conn : *http.Client
          -req : *http.Request
        }

        struct "constants.go" as constants
        struct "master.go" as master
          struct CallPrice
          struct DateInfo
          struct IssueMaster
          struct IssueMarketMaster
          struct IssueMarketRegulation
          struct OperationStatusKabu
          struct SystemStatus

        struct "utils.go" as utils
      }
    }
  }

    package "usecase" {
      interface TradingUsecase {
        +PlaceOrder(ctx context.Context, order *domain.Order) (*domain.Order, error)
        +GetOrderStatus(ctx context.Context, orderID string) (*domain.Order, error)
        +CancelOrder(ctx context.Context, orderID string) error
        +GetEventChannelReader() <-chan domain.OrderEvent
        +GetEventChannelWriter() chan<- domain.OrderEvent
        +HandleOrderEvent(ctx context.Context, event *domain.OrderEvent) error
      }

      struct tradingUsecase {
        -tachibanaClient : tachibana.TachibanaClient
        -logger : *zap.Logger
        -orderRepo : domain.OrderRepository
        -accountRepo : domain.AccountRepository
        -eventCh : chan domain.OrderEvent
        -config          : *config.Config
      }
      struct "trading_impl.go" as tradingImpl {
        +NewTradingUsecase() TradingUsecase
        +PlaceOrder() (*domain.Order, error)
        +GetOrderStatus() (*domain.Order, error)
        +CancelOrder() error
        +GetEventChannelReader() <-chan domain.OrderEvent
        +GetEventChannelWriter() chan<- domain.OrderEvent
        +HandleOrderEvent() error
      }
    }

    package "autotrading" {
        interface AutoTradingUsecase {
          +Start() error
          +Stop() error
          +HandleEvent(event domain.OrderEvent)
        }

        struct autoTradingUsecase{
          -tradingUsecase       : usecase.TradingUsecase
          -autoTradingAlgorithm : *AutoTradingAlgorithm
          -logger               : *zap.Logger
          -config               : *config.Config
          -eventCh              : <-chan domain.OrderEvent
        }
        struct "autotrading_impl.go" as autotradingImpl {
            +NewAutoTradingUsecase() AutoTradingUsecase
            +Start() error
            +Stop() error
            +HandleEvent(event domain.OrderEvent)
        }

        struct AutoTradingAlgorithm{
            +GenerateSignal(event domain.OrderEvent) (*Signal, error)
            +CalculatePosition(signal *Signal) (*Position, error)
        }
        struct Signal{
            Symbol string
            Side   string
        }
        struct Position{
            Symbol   string
            Quantity int
            Side     string
        }
    }
}


' 依存関係の記述

config -down- Config

'--- internal 縦方向の配置 ---
config -down- domain
domain -down- handler
handler -down- infrastructure
infrastructure -down- usecase
usecase -down- autotrading

'--- infrastructure 縦方向の配置---
postgres -down- zapLogger
zapLogger -down- orderRepoImpl
orderRepoImpl -down- accountRepoImpl
accountRepoImpl -down- factTachibanaClient
factTachibanaClient -down- clientLogin
clientLogin -down- clientOrder
clientOrder -down- clientMasterData
clientMasterData -down- eventStream
eventStream -down- constants
constants -down- master
master -down- utils


TradingHandler -[#blue,dashed]-> tradingImpl : uses

tradingImpl ..|> TradingUsecase : implements
tradingImpl --> tachibana.TachibanaClient : uses
tradingImpl --> orderRepoImpl : uses
tradingImpl --> accountRepoImpl : uses

autotradingImpl ..|> AutoTradingUsecase : implements
autotradingImpl --> tradingImpl: uses

factTachibanaClient --> config : uses
factTachibanaClient --> zapLogger : uses
factTachibanaClient ..> TachibanaClientImple : creates
TachibanaClientImple ..|> TachibanaClient : implements

' clientLogin --> TachibanaClientImple : uses 'コメントアウト
' clientOrder --> TachibanaClientImple : uses 'コメントアウト
' clientMasterData --> TachibanaClientImple : uses 'コメントアウト

eventStream --> config : uses
eventStream --> zapLogger : uses
eventStream --> tachibana.TachibanaClient : uses
' eventStream --> tradingImpl : sends events 'コメントアウト

orderRepoImpl ..|> OrderRepository :implements
accountRepoImpl ..|> AccountRepository : implements

postgres --> config : uses
postgres --> zapLogger : uses

zapLogger --> config : uses

legend
  |= Symbol |= Type |= Description |
  |<#CCFFFF>| Interface | インターフェース |
  |<#FFFFFF>| Struct | 構造体 |
  | --> | Uses | 依存関係 |
  | ..> | Creates | 生成 |
  | ..|> | Implements | 実装 |
end legend
@enduml