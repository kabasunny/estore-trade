@startuml
'top to bottom direction ' 全体を縦方向にする場合はこれを使う（今回はコメントアウト）

skinparam packageTitleFontColor #ffffff
skinparam packageTitleBackgroundColor #2E4372
skinparam packageBorderColor #2E4372
skinparam packageBorderThickness 1
skinparam packageTitleFontSize 14
skinparam packageFontSize 13
skinparam defaultFontName "Meiryo"
skinparam classFontSize 12
skinparam classAttributeIconSize 0
skinparam legendFontSize 12

skinparam interface {
  BackgroundColor #CCFFFF
  FontStyle Bold
  BorderColor #3399ff
}

' struct のスタイル
skinparam struct {
  BackgroundColor #FFFFFF
  BorderColor #000080
}


package "cmd" {
  package "trader"{
        struct main
    }
}

package "internal" {
    package "config" {
      struct Config {
        +TachibanaAPIKey    : string
        +TachibanaAPISecret : string
        +TachibanaBaseURL   : string
        +TachibanaUserID    : string
        +TachibanaPassword  : string
        +DBHost             : string
        +DBPort             : int
        +DBUser             : string
        +DBPassword         : string
        +DBName             : string
        +LogLevel           : string
        +EventRid     : string
        +EventBoardNo : string
        +EventEvtCmd  : string
        +HTTPPort     : int
      }
      struct "util_login_config.go" as config {
        +LoadConfig() *Config
      }
    }

    package "domain" {
       struct Order
       struct Account
       struct Position
       struct OrderEvent

      interface OrderRepository {
        +CreateOrder(ctx context.Context, order *Order) error
        +GetOrder(ctx context.Context, id string) (*Order, error)
        +UpdateOrder(ctx context.Context, order *Order) error
        +UpdateOrderStatus(ctx context.Context, orderID string, status string) error
      }
      interface AccountRepository {
       +GetAccount(ctx context.Context, id string) (*Account, error)
       +UpdateAccount(ctx context.Context, account *Account) error
      }
    }

    package "handler" {
      struct TradingHandler {
        -tradingUsecase : usecase.TradingUsecase
        -logger         : *zap.Logger
      }
      struct "fact_new_trading handler.go" as handler {
        +NewTradingHandler() *TradingHandler
        +HandleTrade()
      }
      struct "util_validate_order_request.go"
    }

  package "infrastructure" {
      package "database" {
        package "postgres" {
          struct PostgresDB {
            -db     : *sql.DB
            -logger : *zap.Logger
          }
          struct "postgres.go" as postgres {
            +NewPostgresDB() *PostgresDB
            +Close() error
            +DB() *sql.DB
          }
        }
    }
    package "logger"{
        package "zapLogger" {
          struct "fact_new_zapLogger.go" as zapLogger {
            +NewZapLogger() *zap.Logger
          }
        }
      }

    package "persistence" {
        package "account"{
            struct accountRepository {
                 -db : *sql.DB
             }
            struct "fact_new_account_repository.go" as accountRepoImpl {
                +NewAccountRepository() domain.AccountRepository
                +GetAccount() (*Account, error)
                +UpdateAccount() error
                +getPositions() ([]domain.Position, error)
            }
        }
        package "order"{
            struct orderRepository {
                -db : *sql.DB
            }
            struct "fact_new_order_repository.go" as orderRepoImpl {
            +NewOrderRepository() domain.OrderRepository
            +CreateOrder() error
            +GetOrder() (*Order, error)
            +UpdateOrder() error
            +UpdateOrderStatus() error
            }
        }

      package "tachibana" {
        interface TachibanaClient {
            +Login(ctx context.Context, cfg interface{}) error
            +PlaceOrder(ctx context.Context, order *domain.Order) (*domain.Order, error)
            +GetOrderStatus(ctx context.Context, orderID string) (*domain.Order, error)
            +CancelOrder(ctx context.Context, orderID string) error
            +ConnectEventStream(ctx context.Context) (<-chan *domain.OrderEvent, error)
            +GetRequestURL() (string, error)
            +GetMasterURL() (string, error)
            +GetPriceURL() (string, error)
            +GetEventURL() (string, error)
            +DownloadMasterData(ctx context.Context) error
            +GetSystemStatus() SystemStatus
            +GetDateInfo() DateInfo
            +GetCallPrice(unitNumber string) (CallPrice, bool)
            +GetIssueMaster(issueCode string) (IssueMaster, bool)
            +GetIssueMarketMaster(issueCode, marketCode string) (IssueMarketMaster, bool)
            +GetIssueMarketRegulation(issueCode, marketCode string) (IssueMarketRegulation, bool)
            +GetOperationStatusKabu(listedMarket string, unit string) (OperationStatusKabu, bool)
            +CheckPriceIsValid(issueCode string, price float64, isNextDay bool) (bool, error)
            +SetTargetIssues(ctx context.Context, issueCodes []string) error
        }


         struct TachibanaClientImple {
            -baseURL : *url.URL
            -apiKey : string
            -secret : string
            -logger : *zap.Logger
            -loggined : bool
            -requestURL : string
            -masterURL  : string
            -priceURL   : string
            -eventURL   : string
            -expiry : time.Time
            -mu : sync.RWMutex
            -pNo        : int64
            -pNoMu      : sync.Mutex
            -systemStatus SystemStatus
            -dateInfo     DateInfo
            -callPriceMap map[string]CallPrice
            -issueMap     map[string]IssueMaster
            -issueMarketMap           map[string]map[string]IssueMarketMaster
            -issueMarketRegulationMap map[string]map[string]IssueMarketRegulation
            -operationStatusKabuMap   map[string]map[string]OperationStatusKabu
            -targetIssueCodes         []string
            -targetIssueCodesMu       sync.RWMutex
          }
          struct "fact_new_tachibana_client.go" as factTachibanaClient {
            +NewTachibanaClient() TachibanaClient
          }

          struct "util_login.go" as utilLogin
          struct "mthd_login.go" as mthdLogin
          struct "mthd_place_order.go" as mthdPlaceOrder
          struct "mthd_get_order_status.go" as mthdGetOrderStatus
          struct "mthd_cancel_order.go" as mthdCancelOrder

         struct "mthd_download_master_data.go" as mthdDownloadMasterData{
            +DownloadMasterData() error
            +GetSystemStatus() SystemStatus
            +GetDateInfo() DateInfo
            +GetCallPrice(unitNumber string) (CallPrice, bool)
            +GetIssueMaster(issueCode string) (IssueMaster, bool)
            +GetIssueMarketMaster(issueCode, marketCode string) (IssueMarketMaster, bool)
            +GetIssueMarketRegulation(issueCode, marketCode string) (IssueMarketRegulation, bool)
            +GetOperationStatusKabu(listedMarket string, unit string) (OperationStatusKabu, bool)
            +CheckPriceIsValid(issueCode string, price float64, isNextDay bool) (bool, error)
         }

        struct "mthd_event_stream.go"
        struct "mthd_new_event_stream.go" as mthdNewEventStream
        struct "mthd_start_event_stream.go" as mthdStartEventStream
        struct "mthd_stop_event_stream.go" as mthdStopEventStream
        struct "mthd_parse_event.go" as mthdParseEvent
        struct "mthd_send_event.go" as mthdSendEvent

        struct "constants.go" as constants
        struct "strct_call_price.go" as strctCallPrice
          struct CallPrice
        struct "strct_date_info.go" as strctDateInfo
            struct DateInfo
        struct "strct_issue_master.go" as strctIssueMaster
            struct IssueMaster
        struct "strct_issue_market_master.go" as strctIssueMarketMaster
            struct IssueMarketMaster
        struct "strct_issue_market_regulation.go" as strctIssueMarketRegulation
            struct IssueMarketRegulation
        struct "strct_operation_status_kabu.go" as strctOperationStatusKabu
            struct OperationStatusKabu
        struct "strct_system_status.go" as strctSystemStatus
            struct SystemStatus
        struct "strct_master_data_manager.go" as strctMasterDataManager
        struct "strct_event_stream.go" as strctEventStream
             struct EventStream {
              -tachibanaClient : TachibanaClient
              -config : *config.Config
              -logger : *zap.Logger
              -eventCh : chan<- domain.OrderEvent
              -stopCh : chan struct{}
              -conn : *http.Client
              -req : *http.Request
            }

        struct "util_format_sd_date.go" as utilFormatSDDate
        struct "util_send_request.go" as utilSendRequest
        struct "util_process_response.go" as utilProcessResponse
        struct "util_retry_do.go" as utilRetryDo
        struct "util_map_to_struct.go" as utilMapToStruct
        struct "util_is_valid_price.go" as utilIsValidPrice
        struct "util_contains.go" as utilContains
        struct "mthd_get_request_url.go" as mthdGetRequestURL
        struct "mthd_get_master_url.go" as mthdGetMasterURL
        struct "mthd_get_price_url.go" as mthdGetPriceURL
        struct "mthd_get_event_url.go" as mthdGetEventURL
        struct "mthd_get_system_status.go" as mthdGetSystemStatus
        struct "mthd_get_date_info.go" as mthdGetDateInfo
        struct "mthd_get_call_price.go" as mthdGetCallPrice
        struct "mthd_get_issue_master.go" as mthdGetIssueMaster
        struct "mthd_get_issue_market_master.go" as mthdGetIssueMarketMaster
        struct "mthd_get_issue_market_regulation.go" as mthdGetIssueMarketRegulation
        struct "mthd_get_operation_status_kabu.go" as mthdGetOperationStatusKabu
        struct "mthd_set_target_issues.go" as mthdSetTargetIssues
        struct "mthd_get_p_no.go" as mthdGetPNo
      }
    }
  }

    package "usecase" {
      interface TradingUsecase {
        +PlaceOrder(ctx context.Context, order *domain.Order) (*domain.Order, error)
        +GetOrderStatus(ctx context.Context, orderID string) (*domain.Order, error)
        +CancelOrder(ctx context.Context, orderID string) error
        +GetEventChannelReader() <-chan domain.OrderEvent
        +GetEventChannelWriter() chan<- domain.OrderEvent
        +HandleOrderEvent(ctx context.Context, event *domain.OrderEvent) error
      }

      struct tradingUsecase {
        -tachibanaClient : tachibana.TachibanaClient
        -logger : *zap.Logger
        -orderRepo : domain.OrderRepository
        -accountRepo : domain.AccountRepository
        -eventCh : chan domain.OrderEvent
        -config          : *config.Config
      }
      struct "fact_new_trading_usecase.go" as tradingImpl {
        +NewTradingUsecase() TradingUsecase
        +PlaceOrder() (*domain.Order, error)
        +GetOrderStatus() (*domain.Order, error)
        +CancelOrder() error
        +GetEventChannelReader() <-chan domain.OrderEvent
        +GetEventChannelWriter() chan<- domain.OrderEvent
        +HandleOrderEvent() error
      }
    }

    package "autotrading" {
        package "auto_usecase"{
            interface AutoTradingUsecase {
              +Start() error
              +Stop() error
              +HandleEvent(event domain.OrderEvent)
            }

            struct autoTradingUsecase{
              -tradingUsecase       : usecase.TradingUsecase
              -autoTradingAlgorithm : *AutoTradingAlgorithm
              -logger               : *zap.Logger
              -config               : *config.Config
              -eventCh              : <-chan domain.OrderEvent
            }
            struct "fact_new_autotrading_usecase.go" as autotradingImpl {
                +NewAutoTradingUsecase() AutoTradingUsecase
                +Start() error
                +Stop() error
                +HandleEvent(event domain.OrderEvent)
            }
         }

        package "auto_algorithm"{
            struct AutoTradingAlgorithm{
                +GenerateSignal(event domain.OrderEvent) (*Signal, error)
                +CalculatePosition(signal *Signal) (*Position, error)
            }
            struct "mthd_generate_signal.go" as mthdGenerateSignal
            struct "mthd_culculate_position.go" as mthdCulculatePosition
       }

       package "auto_model"{
            struct Signal{
                Symbol string
                Side   string
            }
            struct Position{
                Symbol   string
                Quantity int
                Side     string
            }
            struct "mthd_should_trade.go" as mthdShouldTrade
        }
    }
}


' 依存関係の記述

config -down- Config

'--- internal 縦方向の配置 ---
config -down- domain
domain -down- handler
handler -down- infrastructure
infrastructure -down- usecase
usecase -down- autotrading

'--- infrastructure 縦方向の配置---
postgres -down- zapLogger
zapLogger -down- orderRepoImpl
orderRepoImpl -down- accountRepoImpl
accountRepoImpl -down- factTachibanaClient
factTachibanaClient -down- utilLogin
utilLogin -down- mthdLogin
mthdLogin -down- mthdPlaceOrder
mthdPlaceOrder -down- mthdGetOrderStatus
mthdGetOrderStatus -down- mthdCancelOrder
mthdCancelOrder -down- mthdDownloadMasterData
mthdDownloadMasterData -down- mthdNewEventStream
mthdNewEventStream -down- mthdStartEventStream
mthdStartEventStream -down- mthdStopEventStream
mthdStopEventStream -down- mthdParseEvent
mthdParseEvent -down- mthdSendEvent
mthdSendEvent -down- constants
constants -down- strctCallPrice
strctCallPrice -down- strctDateInfo
strctDateInfo -down- strctIssueMaster
strctIssueMaster -down- strctIssueMarketMaster
strctIssueMarketMaster -down- strctIssueMarketRegulation
strctIssueMarketRegulation -down- strctOperationStatusKabu
strctOperationStatusKabu -down- strctSystemStatus
strctSystemStatus -down- strctMasterDataManager
strctMasterDataManager -down- strctEventStream
strctEventStream -down- utilFormatSDDate
utilFormatSDDate -down- utilSendRequest
utilSendRequest -down- utilProcessResponse
utilProcessResponse -down- utilRetryDo
utilRetryDo -down- utilMapToStruct
utilMapToStruct -down- utilIsValidPrice
utilIsValidPrice -down- utilContains
utilContains -down- mthdGetRequestURL
mthdGetRequestURL -down- mthdGetMasterURL
mthdGetMasterURL -down- mthdGetPriceURL
mthdGetPriceURL -down- mthdGetEventURL
mthdGetEventURL -down- mthdGetSystemStatus
mthdGetSystemStatus -down- mthdGetDateInfo
mthdGetDateInfo -down- mthdGetCallPrice
mthdGetCallPrice -down- mthdGetIssueMaster
mthdGetIssueMaster -down- mthdGetIssueMarketMaster
mthdGetIssueMarketMaster -down- mthdGetIssueMarketRegulation
mthdGetIssueMarketRegulation -down- mthdGetOperationStatusKabu
mthdGetOperationStatusKabu -down- mthdSetTargetIssues
mthdSetTargetIssues -down- mthdGetPNo

'--- autotrading 縦方向の配置---
autotradingImpl -down- mthdGenerateSignal
mthdGenerateSignal -down- mthdCulculatePosition
mthdCulculatePosition -down- mthdShouldTrade


TradingHandler -[#blue,dashed]-> tradingImpl : uses

tradingImpl ..|> TradingUsecase : implements
tradingImpl --> tachibana.TachibanaClient : uses
tradingImpl --> orderRepoImpl : uses
tradingImpl --> accountRepoImpl : uses

autotradingImpl ..|> AutoTradingUsecase : implements
autotradingImpl --> tradingImpl: uses

factTachibanaClient --> config : uses
factTachibanaClient --> zapLogger : uses
factTachibanaClient ..> TachibanaClientImple : creates
TachibanaClientImple ..|> TachibanaClient : implements

' clientLogin --> TachibanaClientImple : uses 'コメントアウト
' clientOrder --> TachibanaClientImple : uses 'コメントアウト
' clientMasterData --> TachibanaClientImple : uses 'コメントアウト

mthdNewEventStream --> config : uses
mthdNewEventStream --> zapLogger : uses
mthdNewEventStream --> tachibana.TachibanaClient : uses
' eventStream --> tradingImpl : sends events 'コメントアウト

orderRepoImpl ..|> OrderRepository :implements
accountRepoImpl ..|> AccountRepository : implements

postgres --> config : uses
postgres --> zapLogger : uses

zapLogger --> config : uses

main -down-> config
main -down-> zapLogger
main -down-> postgres
main -down-> factTachibanaClient
main -down-> orderRepoImpl
main -down-> accountRepoImpl
main -down-> tradingImpl
main -down-> mthdNewEventStream
main -down-> autotradingImpl
main -down-> handler

legend
  |= Symbol |= Type |= Description |
  |<#CCFFFF>| Interface | インターフェース |
  |<#FFFFFF>| Struct | 構造体 |
  | --> | Uses | 依存関係 |
  | ..> | Creates | 生成 |
  | ..|> | Implements | 実装 |
end legend
@enduml