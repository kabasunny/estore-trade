@startuml
left to right direction
skinparam packageStyle rect
skinparam nodesep 50
skinparam ranksep 50

' スタイル設定
skinparam class {
  BackgroundColor White
  BorderColor Black
  ArrowColor Blue
}
skinparam interface {
  BackgroundColor Wheat
  BorderColor DarkOrange
}

' メイン
class "main.go" as main

' internal パッケージ
package "internal" {
  ' config パッケージ
  package "config" {
    class "config.go" as config {
      +LoadConfig() *Config
    }
    class Config {
      +TachibanaAPIKey : string
      +TachibanaAPISecret : string
      +TachibanaBaseURL : string
      +DBHost : string
      +DBPort : int
      +DBUser : string
      +DBPassword : string
      +DBName : string
      +LogLevel : string
      +EventRid : string
      +EventBoardNo : string
      +EventEvtCmd : string
    }
  }

' domain パッケージ
  package "domain" #DDDDDD {
      class "model.go" as model
      class Order
      class Account
      class Position
      class OrderEvent


    interface OrderRepository
    interface AccountRepository
    class "repository.go" as repository
  }

  ' handler パッケージ
  package "handler" {
      class "trading.go" as handler {
        +NewTradingHandler() *TradingHandler
        +HandleTrade()
      }
      class TradingHandler {
        -tradingUsecase : usecase.TradingUsecase
        -logger : *zap.Logger
      }
  }

  ' infrastructure パッケージ
  package "infrastructure" {
    package "database/postgres" {
        class "postgres.go" as postgres {
          +NewPostgresDB() *PostgresDB
          +Close() error
          +DB() *sql.DB
        }
        class PostgresDB {
          -db : *sql.DB
          -logger : *zap.Logger
        }
    }

    package "logger/zapLogger" {
        class "zapLogger.go" as zapLogger {
          +NewZapLogger() *zap.Logger
        }
    }

    package "persistence" {
        class "order_repository.go" as orderRepoImpl {
          +NewOrderRepository() domain.OrderRepository
          +CreateOrder() error
          +GetOrder() (*Order, error)
          +UpdateOrder() error
          +UpdateOrderStatus() error
        }

        class "account_repository.go" as accountRepoImpl {
          +NewAccountRepository() domain.AccountRepository
          +GetAccount() (*Account, error)
          +UpdateAccount() error
        }

      package "tachibana" {
          class "tachibana_client.go" as tachibanaClient {
            +Login() (string, error)
            +PlaceOrder() (*Order, error)
            +GetOrderStatus() (*Order, error)
            +CancelOrder() error
            +ConnectEventStream() (<-chan *OrderEvent, error)
          }
          interface TachibanaClient

          class "tachibana_client_impl.go" as tachibanaClientImpl {
            +NewTachibanaClient() TachibanaClient
            +Login() (string, error)
            +PlaceOrder() (*Order, error)
            +GetOrderStatus() (*Order, error)
            +CancelOrder() error
            +ConnectEventStream(context.Context) (<-chan *domain.OrderEvent, error)
          }
          class TachibanaClientIntImple {
            -baseURL : *url.URL
            -apiKey : string
            -secret : string
            -logger : *zap.Logger
            -requestURL : string
            -expiry : time.Time
            -mu : sync.RWMutex
          }

          class "event_stream.go" as eventStream {
            +NewEventStream() *EventStream
            +Start() error
            +Stop() error
            +parseEvent() (*OrderEvent, error)
            +sendEvent()
          }
          class EventStream {
            -tachibanaClient : TachibanaClient
            -config : *Config
            -logger : *zap.Logger
            -eventCh : chan<- *OrderEvent
            -stopCh : chan struct{}
            -conn : *http.Client
            -req : *http.Request
          }
      }
    }
  }

  ' usecase パッケージ
  package "usecase" {
      interface TradingUsecase

    class "trading.go" as usecase {
      +GetEventChannelReader() <-chan *OrderEvent
      +GetEventChannelWriter() chan<- *OrderEvent
      +HandleOrderEvent()
    }

      class "trading_impl.go" as tradingImpl {
        +NewTradingUsecase() *TradingUsecase
        +PlaceOrder() (*Order, error)
        +GetOrderStatus() (*Order, error)
        +CancelOrder() error
        +GetEventChannelReader() <-chan *OrderEvent
        +GetEventChannelWriter() chan<- *domain.OrderEvent
        +HandleOrderEvent() error
      }
      class tradingUsecase {
        -tachibanaClient : tachibana.TachibanaClient
        -logger : *zap.Logger
        -orderRepo : domain.OrderRepository
        -accountRepo : domain.AccountRepository
        -eventCh : chan *OrderEvent
      }
  }
}

' 依存関係
main -down-> config : uses
main -down-> zapLogger : uses
main -down-> postgres : uses
main -down-> tachibanaClientImpl : uses
main -[#blue,dashed]down-> tradingImpl : uses event handler
main -down-> handler : uses
main -[#blue,dashed]-> orderRepoImpl: uses
main -[#blue,dashed]-> accountRepoImpl: uses

handler --> tradingImpl : uses

tradingImpl .up.|> TradingUsecase
tradingImpl --> tachibanaClientImpl : uses
tradingImpl --> orderRepoImpl : uses
tradingImpl --> accountRepoImpl : uses

tachibanaClientImpl .up.|> TachibanaClient
tachibanaClientImpl --> config : uses
tachibanaClientImpl --> zapLogger : uses

eventStream --> config : uses
eventStream --> zapLogger : uses
eventStream --> tachibanaClientImpl : uses
eventStream -[#blue,dashed]right-> tradingImpl : sends events

orderRepoImpl .up.|> OrderRepository
accountRepoImpl .up.|> AccountRepository

postgres --> config : uses
postgres --> zapLogger : uses

zapLogger --> config : uses

config -- Config
model -- Order
model -- Account
model -- Position
model -- OrderEvent
TradingUsecase -up-> OrderRepository : uses
TradingUsecase -up-> AccountRepository : uses

legend
  |= |= Type |= Description |
  |<#lightblue>| Main | main.goの依存関係|
  |<#lightgreen>| Implementation | インターフェースの実装 |
  |<#orange>       | Interface Usage| インターフェースの利用 |
  |    | Uses | 依存関係  |
end legend
@enduml